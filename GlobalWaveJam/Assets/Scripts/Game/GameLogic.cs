using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement;

#region delegates
public delegate void DelegateGameState(GameState state);
#endregion

/// <summary>
/// Overall settings. Can be changed or loaded to make another game mode
/// </summary>
public static class GameSettings
{
    public static int MaxPlayers = 8;
    public static int MinPlayerToEnd = 1;
    public static Dictionary<TrackingEvent, int> ScoreMatrix = new Dictionary<TrackingEvent, int>()
    {
        { TrackingEvent.LastManStanding, 10 },
    };

    public static Dictionary<RumbleEvent, RumbleSettings> Rumble = new Dictionary<RumbleEvent, RumbleSettings>()
    {
        {  RumbleEvent.Death, new RumbleSettings() { force = .5f, time = 1f } },
        {  RumbleEvent.ForceHit, new RumbleSettings() { force = .33f, time = .5f } },
        {  RumbleEvent.Thump, new RumbleSettings() { force = .33f, time = .25f } },
        {  RumbleEvent.Win, new RumbleSettings() { force = 3f, time = 1f } },
    };

    public static Dictionary<GameState, float> StateTimes = new Dictionary<GameState, float>()
    {
        { GameState.NONE, -1f },
        { GameState.Intro, .1f },
        { GameState.Play, -1 },
        { GameState.Menu, -1 },
        { GameState.Outro, 2 },
        { GameState.Results, -1 },
    };

}

public class RumbleSettings
{
    public float time;
    public float force;
}

/// <summary>
/// Events generated by a player during a game (to give him point at the end of a game
/// </summary>
public class PlayerStats
{
    // references
    public Player Chara;
    // variables
    public int Index;
    public int Score;
    public Dictionary<TrackingEvent, int> Events = new Dictionary<TrackingEvent, int>()
    {
        //        {  TrackingEvent.LastManStanding, 1},
    };
}


/// <summary>
/// Game logic singleton
/// </summary>
public class GameLogic : Singleton<GameLogic>
{
    #region events
    public event DelegateGameState StateEvent;
    #endregion

    #region players
    private List<PlayerStats> _players = new List<PlayerStats>();
    public static List<PlayerStats> Players
    {
        get { return Instance._players; }
        set { Instance._players = value; }
    }
    #endregion

    private AudioSource BGM;
    private float StateTime;


    #region game state
    private GameState _state = GameState.NONE;

    public static GameState State
    {
        get
        {
            return Instance._state;
        }

        set
        {
            if (Instance._state == value)
                return;

            Instance._state = value;
            Instance.StateTime = 0;

            // callback
            if (Instance.StateEvent != null)
                Instance.StateEvent(State);

            // set state specific logic here
            switch (Instance._state)
            {
                case GameState.Menu:
                    break;

                case GameState.Intro:
                    // compute scores and reset tracking
                    foreach (PlayerStats p in GameLogic.Players)
                    {
                        int newscore = p.Score;
                        foreach (KeyValuePair<TrackingEvent, int> pair in p.Events)
                            newscore += GameSettings.ScoreMatrix[pair.Key] * pair.Value;

                        p.Score = newscore;
                        p.Events.Clear();
                    }
                    // clean rumble
                    RumbleManager.Clear();

                    // load
                    SceneManager.LoadScene("Test_CB");
                    break;

                case GameState.Play:
                    break;

                case GameState.Results:
                    Debug.Log("End game !");
                    // load
                    SceneManager.LoadScene("UIResults"); //, LoadSceneMode.Additive);
                    break;

                default:
                    break;
            }
        }
    }
    #endregion

    #region player stats mgt
    public void OnDeath(Player sender)
    {
        if (sender == null)
            return;

        List<PlayerStats> stats = Players.FindAll(x => x.Chara == sender);
        if (stats.Count == 0)
            return;

        stats[0].Events[TrackingEvent.LastManStanding] = 0;

        Debug.Log(Players.FindAll(x => x.Chara.Alive).Count + " players remaining...");
        // check other players alive, set outro
        if (Players.FindAll(x => x.Chara.Alive).Count <= GameSettings.MinPlayerToEnd)
        {
            PlayerStats p = Players.FindAll(x => x.Chara.Alive)[0];
            // set tracking event
            p.Events[TrackingEvent.LastManStanding] = 1;
            p.Chara.GetComponent<UnityStandardAssets.Characters.ThirdPerson.ThirdPersonUserControl>().Rumble(GameSettings.Rumble[RumbleEvent.Win].force, GameSettings.Rumble[RumbleEvent.Win].time);
            // call next state
            FindObjectOfType<UIGame>().DisplayWin(p.Index, p.Chara.Emission.GetColor("_EmissionColor"));
            State = GameState.Outro;
        }
    }
    #endregion

    // Use this for initialization
    void Start()
    {

    }

    // Update is called once per frame
    void Update()
    {
        StateTime += Time.deltaTime;
        if (GameSettings.StateTimes[State] >= 0 && StateTime > GameSettings.StateTimes[State])
        {

            switch (Instance._state)
            {
                case GameState.Intro:
                    State = GameState.Play;
                    break;

                case GameState.Outro:
                    State = GameState.Results;
                    break;
            }
        }
    }


    #region bgm
    public static void PlayBGM(AudioClip clip, bool loop = true)
    {
        // 1st call in main menu: instatiate
        if (Instance.BGM == null)
        {
            Instance.BGM = Instance.gameObject.AddComponent<AudioSource>();
        }

        Instance.BGM.volume = .5f;

        if (clip == null)
        {
            Debug.LogWarning("No BGM to play !");
            return;
        }

        if (clip != Instance.BGM.clip)
        {
            Instance.BGM.Stop();
            Instance.BGM.clip = clip;
            Instance.BGM.Play();
            Instance.BGM.loop = loop;
        }
    }
    #endregion
}
